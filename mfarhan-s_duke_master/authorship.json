[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"    archiveBaseName \u003d \"Farhan\"","lastModifiedDate":"2024-04-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"mfarhan-s":2,"-":40}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import duke.command.Parser;","lastModifiedDate":"2024-03-22"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-03-23"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"import duke.ui.Ui;","lastModifiedDate":"2024-03-22"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-03-22"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"public class Duke {","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-17"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-04-17"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2024-04-17"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-04-17"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-17"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"        taskList.readTasksFromFile();","lastModifiedDate":"2024-04-17"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"        ui.greetUser();","lastModifiedDate":"2024-04-17"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"        parser.runDuke();","lastModifiedDate":"2024-04-17"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"        ui.sayGoodbye();","lastModifiedDate":"2024-04-17"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"mfarhan-s":19,"-":1}},{"path":"src/main/java/duke/command/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.command;","lastModifiedDate":"2024-03-23"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-03-24"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":" * Utility class for parsing date and time strings.","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":"public class DateTimeParser {","lastModifiedDate":"2024-03-23"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"     * Parses a date and time string into a LocalDateTime object.","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"     * @param dateTimeString The string representing date and time.","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"     * @return The parsed LocalDateTime object.","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If the date and time string is in an invalid format.","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"    public static LocalDateTime parseDateTime(String dateTimeString) throws DukeException {","lastModifiedDate":"2024-03-24"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"        try {","lastModifiedDate":"2024-03-23"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2024-03-23"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"            return LocalDateTime.parse(dateTimeString, formatter);","lastModifiedDate":"2024-03-23"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"            throw DukeException.invalidDateTimeFormat();","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-03-23"}],"authorContributionMap":{"mfarhan-s":28}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.command;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"import duke.task.*;","lastModifiedDate":"2024-03-22"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"import duke.ui.Ui;","lastModifiedDate":"2024-03-22"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-03-22"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":" * Represents a parser for user commands.","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":" * Parses user commands and executes corresponding actions.","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"public class Parser {","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the provided command.","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"     * @param command The command to execute.","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"    public static void executeCommand(String command) {","lastModifiedDate":"2024-04-01"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"        try {","lastModifiedDate":"2024-04-01"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"            String[] commandParts \u003d command.split(\" \", 3);","lastModifiedDate":"2024-04-01"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"            String commandType \u003d commandParts[0].toLowerCase();","lastModifiedDate":"2024-04-03"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"            switch (commandType) {","lastModifiedDate":"2024-04-03"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"                case \"list\":","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"                    executeListCommand();","lastModifiedDate":"2024-04-03"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"mfarhan-s"},"content":"                case \"mark\":","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"mfarhan-s"},"content":"                    executeMarkCommand(commandParts);","lastModifiedDate":"2024-04-03"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-04-03"},{"lineNumber":32,"author":{"gitId":"mfarhan-s"},"content":"                case \"unmark\":","lastModifiedDate":"2024-04-03"},{"lineNumber":33,"author":{"gitId":"mfarhan-s"},"content":"                    executeUnmarkCommand(commandParts);","lastModifiedDate":"2024-04-03"},{"lineNumber":34,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"                case \"todo\":","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"mfarhan-s"},"content":"                    executeTodoCommand(command, commandParts);","lastModifiedDate":"2024-04-03"},{"lineNumber":37,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-04-03"},{"lineNumber":38,"author":{"gitId":"mfarhan-s"},"content":"                case \"deadline\":","lastModifiedDate":"2024-04-03"},{"lineNumber":39,"author":{"gitId":"mfarhan-s"},"content":"                    executeDeadlineCommand(command, commandParts);","lastModifiedDate":"2024-04-03"},{"lineNumber":40,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-04-03"},{"lineNumber":41,"author":{"gitId":"mfarhan-s"},"content":"                case \"event\":","lastModifiedDate":"2024-04-03"},{"lineNumber":42,"author":{"gitId":"mfarhan-s"},"content":"                    executeEventCommand(command, commandParts);","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"mfarhan-s"},"content":"                case \"delete\":","lastModifiedDate":"2024-04-03"},{"lineNumber":45,"author":{"gitId":"mfarhan-s"},"content":"                    executeDeleteCommand(commandParts);","lastModifiedDate":"2024-04-03"},{"lineNumber":46,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-04-03"},{"lineNumber":47,"author":{"gitId":"mfarhan-s"},"content":"                case \"find\":","lastModifiedDate":"2024-04-03"},{"lineNumber":48,"author":{"gitId":"mfarhan-s"},"content":"                    executeFindCommand(commandParts);","lastModifiedDate":"2024-04-03"},{"lineNumber":49,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-04-03"},{"lineNumber":50,"author":{"gitId":"mfarhan-s"},"content":"                case \"postpone\":","lastModifiedDate":"2024-04-03"},{"lineNumber":51,"author":{"gitId":"mfarhan-s"},"content":"                    executePostponeCommand(commandParts);","lastModifiedDate":"2024-04-03"},{"lineNumber":52,"author":{"gitId":"mfarhan-s"},"content":"                    break;","lastModifiedDate":"2024-04-03"},{"lineNumber":53,"author":{"gitId":"mfarhan-s"},"content":"                default:","lastModifiedDate":"2024-04-03"},{"lineNumber":54,"author":{"gitId":"mfarhan-s"},"content":"                    Ui.displayMessage(\"    Unknown command! Enter a valid command.\");","lastModifiedDate":"2024-04-03"},{"lineNumber":55,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-04-03"},{"lineNumber":56,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":57,"author":{"gitId":"mfarhan-s"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-04-03"},{"lineNumber":58,"author":{"gitId":"mfarhan-s"},"content":"            Ui.displayMessage(e.getMessage());","lastModifiedDate":"2024-04-03"},{"lineNumber":59,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":60,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":61,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":62,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":63,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"list\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":64,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":65,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":66,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":67,"author":{"gitId":"mfarhan-s"},"content":"    private static void executeListCommand() throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":68,"author":{"gitId":"mfarhan-s"},"content":"        Ui.displayTaskList(TaskList.taskList);","lastModifiedDate":"2024-04-03"},{"lineNumber":69,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":70,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":71,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":72,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"mark\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":73,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"mfarhan-s"},"content":"     * @param commandParts The command parts.","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":77,"author":{"gitId":"mfarhan-s"},"content":"    private static void executeMarkCommand(String[] commandParts) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":78,"author":{"gitId":"mfarhan-s"},"content":"        if (commandParts.length \u003e 1) {","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"mfarhan-s"},"content":"            try {","lastModifiedDate":"2024-03-20"},{"lineNumber":80,"author":{"gitId":"mfarhan-s"},"content":"                TaskList.markTaskAsDone(Integer.parseInt(commandParts[1]));","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"mfarhan-s"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"mfarhan-s"},"content":"                DukeException.handleGracefulError(DukeException.invalidTaskNumber());","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(DukeException.invalidTaskNumber());","lastModifiedDate":"2024-03-20"},{"lineNumber":86,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":87,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":88,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":89,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":90,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"unmark\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":91,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":92,"author":{"gitId":"mfarhan-s"},"content":"     * @param commandParts The command parts.","lastModifiedDate":"2024-04-03"},{"lineNumber":93,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":94,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":95,"author":{"gitId":"mfarhan-s"},"content":"    private static void executeUnmarkCommand(String[] commandParts) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":96,"author":{"gitId":"mfarhan-s"},"content":"        if (commandParts.length \u003e 1) {","lastModifiedDate":"2024-03-20"},{"lineNumber":97,"author":{"gitId":"mfarhan-s"},"content":"            try {","lastModifiedDate":"2024-03-20"},{"lineNumber":98,"author":{"gitId":"mfarhan-s"},"content":"                TaskList.unmarkTaskAsDone(Integer.parseInt(commandParts[1]));","lastModifiedDate":"2024-03-20"},{"lineNumber":99,"author":{"gitId":"mfarhan-s"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":100,"author":{"gitId":"mfarhan-s"},"content":"                DukeException.handleGracefulError(DukeException.invalidTaskNumber());","lastModifiedDate":"2024-03-20"},{"lineNumber":101,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":102,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":103,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(DukeException.invalidTaskNumber());","lastModifiedDate":"2024-03-20"},{"lineNumber":104,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":106,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":107,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":108,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"todo\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":110,"author":{"gitId":"mfarhan-s"},"content":"     * @param command      The full command string.","lastModifiedDate":"2024-04-03"},{"lineNumber":111,"author":{"gitId":"mfarhan-s"},"content":"     * @param commandParts The command parts.","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":113,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":114,"author":{"gitId":"mfarhan-s"},"content":"    private static void executeTodoCommand(String command, String[] commandParts) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":115,"author":{"gitId":"mfarhan-s"},"content":"        if (commandParts.length \u003e 1) {","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"mfarhan-s"},"content":"            ToDo toDoTask \u003d ToDo.createToDoFromCommand(command);","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"mfarhan-s"},"content":"            if (toDoTask !\u003d null) {","lastModifiedDate":"2024-03-20"},{"lineNumber":118,"author":{"gitId":"mfarhan-s"},"content":"                TaskList.addTask(toDoTask);","lastModifiedDate":"2024-03-20"},{"lineNumber":119,"author":{"gitId":"mfarhan-s"},"content":"            } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":120,"author":{"gitId":"mfarhan-s"},"content":"                DukeException.handleGracefulError(DukeException.invalidToDoFormat());","lastModifiedDate":"2024-03-20"},{"lineNumber":121,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":122,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":123,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(DukeException.invalidToDoFormat());","lastModifiedDate":"2024-03-20"},{"lineNumber":124,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":125,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":126,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":127,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":128,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"deadline\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":129,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"mfarhan-s"},"content":"     * @param command      The full command string.","lastModifiedDate":"2024-04-03"},{"lineNumber":131,"author":{"gitId":"mfarhan-s"},"content":"     * @param commandParts The command parts.","lastModifiedDate":"2024-04-03"},{"lineNumber":132,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":134,"author":{"gitId":"mfarhan-s"},"content":"    private static void executeDeadlineCommand(String command, String[] commandParts) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":135,"author":{"gitId":"mfarhan-s"},"content":"        if (commandParts.length \u003e 1) {","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"mfarhan-s"},"content":"            Deadline deadlineTask \u003d Deadline.createDeadlineFromCommand(command);","lastModifiedDate":"2024-03-20"},{"lineNumber":137,"author":{"gitId":"mfarhan-s"},"content":"            if (deadlineTask !\u003d null) {","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"mfarhan-s"},"content":"                TaskList.addTask(deadlineTask);","lastModifiedDate":"2024-03-20"},{"lineNumber":139,"author":{"gitId":"mfarhan-s"},"content":"            } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":140,"author":{"gitId":"mfarhan-s"},"content":"                DukeException.handleGracefulError(DukeException.invalidDeadlineFormat());","lastModifiedDate":"2024-03-20"},{"lineNumber":141,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":142,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-04-01"},{"lineNumber":143,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(DukeException.invalidDeadlineFormat());","lastModifiedDate":"2024-03-20"},{"lineNumber":144,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":145,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":148,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"event\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":149,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":150,"author":{"gitId":"mfarhan-s"},"content":"     * @param command      The full command string.","lastModifiedDate":"2024-04-03"},{"lineNumber":151,"author":{"gitId":"mfarhan-s"},"content":"     * @param commandParts The command parts.","lastModifiedDate":"2024-04-03"},{"lineNumber":152,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":153,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":154,"author":{"gitId":"mfarhan-s"},"content":"    private static void executeEventCommand(String command, String[] commandParts) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":155,"author":{"gitId":"mfarhan-s"},"content":"        if (commandParts.length \u003e 1) {","lastModifiedDate":"2024-03-20"},{"lineNumber":156,"author":{"gitId":"mfarhan-s"},"content":"            Event eventTask \u003d Event.createEventFromCommand(command);","lastModifiedDate":"2024-03-20"},{"lineNumber":157,"author":{"gitId":"mfarhan-s"},"content":"            if (eventTask !\u003d null) {","lastModifiedDate":"2024-03-20"},{"lineNumber":158,"author":{"gitId":"mfarhan-s"},"content":"                TaskList.addTask(eventTask);","lastModifiedDate":"2024-03-20"},{"lineNumber":159,"author":{"gitId":"mfarhan-s"},"content":"            } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":160,"author":{"gitId":"mfarhan-s"},"content":"                DukeException.handleGracefulError(DukeException.invalidEventFormat());","lastModifiedDate":"2024-03-20"},{"lineNumber":161,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":162,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":163,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(DukeException.invalidEventFormat());","lastModifiedDate":"2024-03-20"},{"lineNumber":164,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":165,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":166,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":167,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"delete\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"mfarhan-s"},"content":"     * @param commandParts The command parts.","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":173,"author":{"gitId":"mfarhan-s"},"content":"    private static void executeDeleteCommand(String[] commandParts) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":174,"author":{"gitId":"mfarhan-s"},"content":"        if (commandParts.length \u003e 1) {","lastModifiedDate":"2024-03-20"},{"lineNumber":175,"author":{"gitId":"mfarhan-s"},"content":"            try {","lastModifiedDate":"2024-03-20"},{"lineNumber":176,"author":{"gitId":"mfarhan-s"},"content":"                int taskNumber \u003d Integer.parseInt(commandParts[1]);","lastModifiedDate":"2024-03-20"},{"lineNumber":177,"author":{"gitId":"mfarhan-s"},"content":"                TaskList.deleteTask(taskNumber, TaskList.taskList);","lastModifiedDate":"2024-03-20"},{"lineNumber":178,"author":{"gitId":"mfarhan-s"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":179,"author":{"gitId":"mfarhan-s"},"content":"                DukeException.handleGracefulError(DukeException.invalidTaskNumber());","lastModifiedDate":"2024-03-20"},{"lineNumber":180,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":181,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":182,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(DukeException.invalidTaskNumber());","lastModifiedDate":"2024-03-20"},{"lineNumber":183,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":184,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":185,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":186,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":187,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"find\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":188,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":189,"author":{"gitId":"mfarhan-s"},"content":"     * @param commandParts The command parts.","lastModifiedDate":"2024-04-03"},{"lineNumber":190,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":191,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":192,"author":{"gitId":"mfarhan-s"},"content":"    private static void executeFindCommand(String[] commandParts) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":193,"author":{"gitId":"mfarhan-s"},"content":"        if (commandParts.length \u003e 1) {","lastModifiedDate":"2024-04-01"},{"lineNumber":194,"author":{"gitId":"mfarhan-s"},"content":"            String keyword \u003d commandParts[1].trim();","lastModifiedDate":"2024-04-01"},{"lineNumber":195,"author":{"gitId":"mfarhan-s"},"content":"            TaskList.findTasksByKeyword(keyword);","lastModifiedDate":"2024-04-01"},{"lineNumber":196,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-04-01"},{"lineNumber":197,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(DukeException.invalidFindFormat());","lastModifiedDate":"2024-04-01"},{"lineNumber":198,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":199,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":200,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":201,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":202,"author":{"gitId":"mfarhan-s"},"content":"     * Executes the \"postpone\" command.","lastModifiedDate":"2024-04-03"},{"lineNumber":203,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":204,"author":{"gitId":"mfarhan-s"},"content":"     * @param commandParts The command parts.","lastModifiedDate":"2024-04-03"},{"lineNumber":205,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2024-04-03"},{"lineNumber":206,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":207,"author":{"gitId":"mfarhan-s"},"content":"    private static void executePostponeCommand(String[] commandParts) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":208,"author":{"gitId":"mfarhan-s"},"content":"        if (commandParts.length \u003e 2) {","lastModifiedDate":"2024-04-01"},{"lineNumber":209,"author":{"gitId":"mfarhan-s"},"content":"            try {","lastModifiedDate":"2024-04-01"},{"lineNumber":210,"author":{"gitId":"mfarhan-s"},"content":"                int taskNumber \u003d Integer.parseInt(commandParts[1]);","lastModifiedDate":"2024-04-01"},{"lineNumber":211,"author":{"gitId":"mfarhan-s"},"content":"                if (!TaskList.isValidTaskNumber(taskNumber, TaskList.taskList)) {","lastModifiedDate":"2024-04-17"},{"lineNumber":212,"author":{"gitId":"mfarhan-s"},"content":"                    DukeException.handleGracefulError(DukeException.invalidTaskNumber());","lastModifiedDate":"2024-04-17"},{"lineNumber":213,"author":{"gitId":"mfarhan-s"},"content":"                }","lastModifiedDate":"2024-04-17"},{"lineNumber":214,"author":{"gitId":"mfarhan-s"},"content":"                LocalDateTime newDueDateTime \u003d DateTimeParser.parseDateTime(commandParts[2]);","lastModifiedDate":"2024-04-01"},{"lineNumber":215,"author":{"gitId":"mfarhan-s"},"content":"                if (newDueDateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2024-04-17"},{"lineNumber":216,"author":{"gitId":"mfarhan-s"},"content":"                    DukeException.handleGracefulError(DukeException.invalidDateTimeFormat());","lastModifiedDate":"2024-04-17"},{"lineNumber":217,"author":{"gitId":"mfarhan-s"},"content":"                } else {","lastModifiedDate":"2024-04-17"},{"lineNumber":218,"author":{"gitId":"mfarhan-s"},"content":"                    TaskList.postponeTask(taskNumber, newDueDateTime);","lastModifiedDate":"2024-04-01"},{"lineNumber":219,"author":{"gitId":"mfarhan-s"},"content":"                }","lastModifiedDate":"2024-04-17"},{"lineNumber":220,"author":{"gitId":"mfarhan-s"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-04-01"},{"lineNumber":221,"author":{"gitId":"mfarhan-s"},"content":"                DukeException.handleGracefulError(DukeException.invalidTaskNumber());","lastModifiedDate":"2024-04-01"},{"lineNumber":222,"author":{"gitId":"mfarhan-s"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2024-04-01"},{"lineNumber":223,"author":{"gitId":"mfarhan-s"},"content":"                throw new DukeException(\"Error: \" + e.getMessage());","lastModifiedDate":"2024-04-01"},{"lineNumber":224,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":225,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-04-01"},{"lineNumber":226,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(DukeException.invalidPostponeFormat());","lastModifiedDate":"2024-04-17"},{"lineNumber":227,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":228,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":229,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":230,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":231,"author":{"gitId":"mfarhan-s"},"content":"     * Runs the Duke application by taking user input and executing commands until the user exits.","lastModifiedDate":"2024-04-02"},{"lineNumber":232,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":233,"author":{"gitId":"mfarhan-s"},"content":"    public void runDuke() {","lastModifiedDate":"2024-04-17"},{"lineNumber":234,"author":{"gitId":"mfarhan-s"},"content":"        String userInput;","lastModifiedDate":"2024-03-20"},{"lineNumber":235,"author":{"gitId":"mfarhan-s"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2024-03-20"},{"lineNumber":236,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":237,"author":{"gitId":"mfarhan-s"},"content":"        do {","lastModifiedDate":"2024-03-20"},{"lineNumber":238,"author":{"gitId":"mfarhan-s"},"content":"            userInput \u003d in.nextLine().trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":239,"author":{"gitId":"mfarhan-s"},"content":"            if (userInput.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":240,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(new DukeException(\"Enter a valid command\").getErrorMessage());","lastModifiedDate":"2024-03-20"},{"lineNumber":241,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":242,"author":{"gitId":"mfarhan-s"},"content":"            if (userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-03-20"},{"lineNumber":243,"author":{"gitId":"mfarhan-s"},"content":"                continue;","lastModifiedDate":"2024-03-20"},{"lineNumber":244,"author":{"gitId":"mfarhan-s"},"content":"            } else if (userInput.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-03-20"},{"lineNumber":245,"author":{"gitId":"mfarhan-s"},"content":"                TaskList.displayList();","lastModifiedDate":"2024-03-20"},{"lineNumber":246,"author":{"gitId":"mfarhan-s"},"content":"                continue;","lastModifiedDate":"2024-03-20"},{"lineNumber":247,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":248,"author":{"gitId":"mfarhan-s"},"content":"            Parser.executeCommand(userInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":249,"author":{"gitId":"mfarhan-s"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":250,"author":{"gitId":"mfarhan-s"},"content":"        } while (!userInput.equalsIgnoreCase(\"bye\"));","lastModifiedDate":"2024-03-20"},{"lineNumber":251,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":252,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"mfarhan-s":252}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.exception;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":" * Represents an exception specific to the Duke application.","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":" * This class extends the general Exception class.","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-03-09"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"     * Constructs a DukeException with the specified detail message.","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"     * @param message The detail message.","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"    public DukeException(String message) {","lastModifiedDate":"2024-03-09"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"        super(message);","lastModifiedDate":"2024-03-09"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-09"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"     * Returns a formatted error message for displaying to the user.","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"     * @return The formatted error message.","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"    public String getErrorMessage() {","lastModifiedDate":"2024-03-09"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"        return \"    Arise, ERROR!: \" + getMessage();","lastModifiedDate":"2024-03-16"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-09"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"     * Handles the given DukeException gracefully by printing its error message.","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"mfarhan-s"},"content":"     * @param exception The DukeException to handle.","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"    public static void handleGracefulError(DukeException exception) {","lastModifiedDate":"2024-03-09"},{"lineNumber":32,"author":{"gitId":"mfarhan-s"},"content":"        System.out.println(exception.getErrorMessage());","lastModifiedDate":"2024-03-09"},{"lineNumber":33,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-09"},{"lineNumber":34,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a DukeException for an invalid task number.","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"mfarhan-s"},"content":"     * @return The DukeException for an invalid task number.","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"mfarhan-s"},"content":"    public static DukeException invalidTaskNumber() {","lastModifiedDate":"2024-03-09"},{"lineNumber":41,"author":{"gitId":"mfarhan-s"},"content":"        return new DukeException(\"Foolish mortal! Specify a valid task number.\");","lastModifiedDate":"2024-03-16"},{"lineNumber":42,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-09"},{"lineNumber":43,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-09"},{"lineNumber":44,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a DukeException for an invalid ToDo format.","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"mfarhan-s"},"content":"     * @return The DukeException for an invalid ToDo format.","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"mfarhan-s"},"content":"    public static DukeException invalidToDoFormat() {","lastModifiedDate":"2024-03-09"},{"lineNumber":50,"author":{"gitId":"mfarhan-s"},"content":"        return new DukeException(\"Aha! Enter the ToDo format as follows: todo \u003cdescription\u003e\");","lastModifiedDate":"2024-03-16"},{"lineNumber":51,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-09"},{"lineNumber":52,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-09"},{"lineNumber":53,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a DukeException for an invalid Deadline format.","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"mfarhan-s"},"content":"     * @return The DukeException for an invalid Deadline format.","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"mfarhan-s"},"content":"    public static DukeException invalidDeadlineFormat() {","lastModifiedDate":"2024-03-09"},{"lineNumber":59,"author":{"gitId":"mfarhan-s"},"content":"        return new DukeException(\"Pathetic creature! Enter the Deadline format as follows: deadline \u003cdescription\u003e /by \u003cdd/mm/yyyy HHmm\u003e\");","lastModifiedDate":"2024-03-24"},{"lineNumber":60,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-09"},{"lineNumber":61,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-09"},{"lineNumber":62,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a DukeException for an invalid Event format.","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"mfarhan-s"},"content":"     * @return The DukeException for an invalid Event format.","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"mfarhan-s"},"content":"    public static DukeException invalidEventFormat() {","lastModifiedDate":"2024-03-09"},{"lineNumber":68,"author":{"gitId":"mfarhan-s"},"content":"        return new DukeException(\"Worthless Being! Enter the Event format as follows: event \u003cdescription\u003e /from \u003cdate\u003e /to \u003cdate\u003e\");","lastModifiedDate":"2024-03-16"},{"lineNumber":69,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-09"},{"lineNumber":70,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":71,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a DukeException for an invalid date-time format.","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"mfarhan-s"},"content":"     * @return The DukeException for an invalid date-time format.","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"mfarhan-s"},"content":"    public static DukeException invalidDateTimeFormat() {","lastModifiedDate":"2024-03-23"},{"lineNumber":77,"author":{"gitId":"mfarhan-s"},"content":"        return new DukeException(\"You ignorant fool! Enter date and time in the correct format: dd/mm/yyyy HHmm\");","lastModifiedDate":"2024-03-24"},{"lineNumber":78,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-23"},{"lineNumber":79,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":80,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":81,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a DukeException for an invalid \u0027find\u0027 command format.","lastModifiedDate":"2024-04-02"},{"lineNumber":82,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":83,"author":{"gitId":"mfarhan-s"},"content":"     * @return The DukeException for an invalid \u0027find\u0027 command format.","lastModifiedDate":"2024-04-02"},{"lineNumber":84,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":85,"author":{"gitId":"mfarhan-s"},"content":"    public static DukeException invalidFindFormat() {","lastModifiedDate":"2024-04-01"},{"lineNumber":86,"author":{"gitId":"mfarhan-s"},"content":"        return new DukeException(\"Invalid format for \u0027find\u0027 command. Please specify a keyword.\");","lastModifiedDate":"2024-04-01"},{"lineNumber":87,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":88,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":89,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a DukeException for an invalid \u0027postpone\u0027 format.","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"mfarhan-s"},"content":"     * @return The DukeException for an invalid \u0027postpone\u0027 format.","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"mfarhan-s"},"content":"    public static DukeException invalidPostponeFormat() {","lastModifiedDate":"2024-04-17"},{"lineNumber":95,"author":{"gitId":"mfarhan-s"},"content":"        return new DukeException(\"Invalid \u0027postpone\u0027 format\");","lastModifiedDate":"2024-04-01"},{"lineNumber":96,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":97,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-03-09"}],"authorContributionMap":{"mfarhan-s":97}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.storage;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import duke.command.DateTimeParser;","lastModifiedDate":"2024-04-01"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"import duke.task.*;","lastModifiedDate":"2024-04-01"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-04-01"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-03-17"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-23"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"import java.util.List;","lastModifiedDate":"2024-03-17"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-23"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":" * Represents the storage utility for saving and loading tasks.","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":" * Manages the reading and writing of tasks to a file.","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"public class Storage {","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"     * The file path for storing tasks.","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2024-03-17"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"     * Saves the list of tasks to a file.","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskList The list of tasks to save.","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while saving tasks to the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"mfarhan-s"},"content":"    public static void saveTasksToFile(ArrayList\u003cTask\u003e taskList) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":34,"author":{"gitId":"mfarhan-s"},"content":"        assert taskList !\u003d null : \"Task list must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":36,"author":{"gitId":"mfarhan-s"},"content":"        try {","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"mfarhan-s"},"content":"            Path filePath \u003d Paths.get(FILE_PATH);","lastModifiedDate":"2024-03-17"},{"lineNumber":38,"author":{"gitId":"mfarhan-s"},"content":"            createDirectoriesIfNeeded(filePath);","lastModifiedDate":"2024-03-17"},{"lineNumber":39,"author":{"gitId":"mfarhan-s"},"content":"            List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"mfarhan-s"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2024-03-17"},{"lineNumber":41,"author":{"gitId":"mfarhan-s"},"content":"                lines.add(taskToFileString(task));","lastModifiedDate":"2024-03-17"},{"lineNumber":42,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-17"},{"lineNumber":43,"author":{"gitId":"mfarhan-s"},"content":"            Files.write(filePath, lines);","lastModifiedDate":"2024-03-17"},{"lineNumber":44,"author":{"gitId":"mfarhan-s"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-17"},{"lineNumber":45,"author":{"gitId":"mfarhan-s"},"content":"            throw new DukeException(\"Error saving tasks to file: \" + e.getMessage());","lastModifiedDate":"2024-03-23"},{"lineNumber":46,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":47,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":48,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":49,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"mfarhan-s"},"content":"     * Loads tasks from a file into a list of tasks.","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"mfarhan-s"},"content":"     * @return The list of tasks loaded from the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while loading tasks from the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"mfarhan-s"},"content":"    public static ArrayList\u003cTask\u003e loadTasksFromFile() throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":56,"author":{"gitId":"mfarhan-s"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"mfarhan-s"},"content":"        try {","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"mfarhan-s"},"content":"            Path filePath \u003d Paths.get(FILE_PATH);","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"mfarhan-s"},"content":"            createDirectoriesIfNeeded(filePath);","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"mfarhan-s"},"content":"            createFileIfNeeded(filePath);","lastModifiedDate":"2024-03-17"},{"lineNumber":61,"author":{"gitId":"mfarhan-s"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(filePath);","lastModifiedDate":"2024-03-17"},{"lineNumber":62,"author":{"gitId":"mfarhan-s"},"content":"            for (String line : lines) {","lastModifiedDate":"2024-03-17"},{"lineNumber":63,"author":{"gitId":"mfarhan-s"},"content":"                Task task \u003d fileStringToTask(line);","lastModifiedDate":"2024-03-17"},{"lineNumber":64,"author":{"gitId":"mfarhan-s"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2024-03-17"},{"lineNumber":65,"author":{"gitId":"mfarhan-s"},"content":"                    loadedTasks.add(task);","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"mfarhan-s"},"content":"                }","lastModifiedDate":"2024-03-17"},{"lineNumber":67,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-17"},{"lineNumber":68,"author":{"gitId":"mfarhan-s"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-17"},{"lineNumber":69,"author":{"gitId":"mfarhan-s"},"content":"            throw new DukeException(\"Error loading tasks from file: \" + e.getMessage());","lastModifiedDate":"2024-03-23"},{"lineNumber":70,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":71,"author":{"gitId":"mfarhan-s"},"content":"        return loadedTasks;","lastModifiedDate":"2024-03-17"},{"lineNumber":72,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":73,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":74,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"mfarhan-s"},"content":"     * Creates necessary directories if they do not exist.","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"mfarhan-s"},"content":"     * @param filePath The file path.","lastModifiedDate":"2024-04-02"},{"lineNumber":78,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while creating directories.","lastModifiedDate":"2024-04-02"},{"lineNumber":79,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":80,"author":{"gitId":"mfarhan-s"},"content":"    private static void createDirectoriesIfNeeded(Path filePath) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":81,"author":{"gitId":"mfarhan-s"},"content":"        assert filePath !\u003d null : \"File path must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":82,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":83,"author":{"gitId":"mfarhan-s"},"content":"        Path directoryPath \u003d filePath.getParent();","lastModifiedDate":"2024-03-17"},{"lineNumber":84,"author":{"gitId":"mfarhan-s"},"content":"        if (!Files.exists(directoryPath)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":85,"author":{"gitId":"mfarhan-s"},"content":"            try {","lastModifiedDate":"2024-03-17"},{"lineNumber":86,"author":{"gitId":"mfarhan-s"},"content":"                Files.createDirectories(directoryPath);","lastModifiedDate":"2024-03-17"},{"lineNumber":87,"author":{"gitId":"mfarhan-s"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-03-17"},{"lineNumber":88,"author":{"gitId":"mfarhan-s"},"content":"                throw new DukeException(\"Error creating directory: \" + e.getMessage());","lastModifiedDate":"2024-03-23"},{"lineNumber":89,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-17"},{"lineNumber":90,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":91,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":92,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":93,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":94,"author":{"gitId":"mfarhan-s"},"content":"     * Creates the file if it does not exist.","lastModifiedDate":"2024-04-02"},{"lineNumber":95,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":96,"author":{"gitId":"mfarhan-s"},"content":"     * @param filePath The file path.","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while creating the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":99,"author":{"gitId":"mfarhan-s"},"content":"    private static void createFileIfNeeded(Path filePath) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":100,"author":{"gitId":"mfarhan-s"},"content":"        assert filePath !\u003d null : \"File path must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":101,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":102,"author":{"gitId":"mfarhan-s"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2024-03-17"},{"lineNumber":103,"author":{"gitId":"mfarhan-s"},"content":"            try {","lastModifiedDate":"2024-03-17"},{"lineNumber":104,"author":{"gitId":"mfarhan-s"},"content":"                Files.createFile(filePath);","lastModifiedDate":"2024-03-17"},{"lineNumber":105,"author":{"gitId":"mfarhan-s"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-03-17"},{"lineNumber":106,"author":{"gitId":"mfarhan-s"},"content":"                throw new DukeException(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2024-03-23"},{"lineNumber":107,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-17"},{"lineNumber":108,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":109,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":110,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":111,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":112,"author":{"gitId":"mfarhan-s"},"content":"     * Converts a task object to a string representation for storing in the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":113,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":114,"author":{"gitId":"mfarhan-s"},"content":"     * @param task The task object.","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"mfarhan-s"},"content":"     * @return The string representation of the task for storing in the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while converting the task to string.","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"mfarhan-s"},"content":"    private static String taskToFileString(Task task) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":119,"author":{"gitId":"mfarhan-s"},"content":"        assert task !\u003d null : \"Task must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":120,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":121,"author":{"gitId":"mfarhan-s"},"content":"        if (task instanceof ToDo) {","lastModifiedDate":"2024-03-17"},{"lineNumber":122,"author":{"gitId":"mfarhan-s"},"content":"            return String.format(\"T | %d | %s\", task.isDone() ? 1 : 0, task.getDescription());","lastModifiedDate":"2024-03-23"},{"lineNumber":123,"author":{"gitId":"mfarhan-s"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2024-03-17"},{"lineNumber":124,"author":{"gitId":"mfarhan-s"},"content":"            Deadline deadlineTask \u003d (Deadline) task;","lastModifiedDate":"2024-03-17"},{"lineNumber":125,"author":{"gitId":"mfarhan-s"},"content":"            String formattedDate \u003d deadlineTask.getBy().format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2024-03-23"},{"lineNumber":126,"author":{"gitId":"mfarhan-s"},"content":"            return String.format(\"D | %d | %s | %s\", task.isDone() ? 1 : 0, task.getDescription(), formattedDate);","lastModifiedDate":"2024-03-23"},{"lineNumber":127,"author":{"gitId":"mfarhan-s"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2024-03-17"},{"lineNumber":128,"author":{"gitId":"mfarhan-s"},"content":"            Event eventTask \u003d (Event) task;","lastModifiedDate":"2024-03-17"},{"lineNumber":129,"author":{"gitId":"mfarhan-s"},"content":"            String formattedFrom \u003d eventTask.getFromDateTime().format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2024-03-24"},{"lineNumber":130,"author":{"gitId":"mfarhan-s"},"content":"            String formattedTo \u003d eventTask.getToDateTime().format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2024-03-24"},{"lineNumber":131,"author":{"gitId":"mfarhan-s"},"content":"            return String.format(\"E | %d | %s | %s - %s\", task.isDone() ? 1 : 0, task.getDescription(), formattedFrom, formattedTo);","lastModifiedDate":"2024-03-23"},{"lineNumber":132,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-23"},{"lineNumber":133,"author":{"gitId":"mfarhan-s"},"content":"            throw new DukeException(\"Error formatting task to string: Unknown task type.\");","lastModifiedDate":"2024-03-23"},{"lineNumber":134,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":135,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":136,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":137,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":138,"author":{"gitId":"mfarhan-s"},"content":"     * Parses the given file string and creates a corresponding Task object.","lastModifiedDate":"2024-04-03"},{"lineNumber":139,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"mfarhan-s"},"content":"     * @param fileString The string representation of the task in the file.","lastModifiedDate":"2024-04-03"},{"lineNumber":141,"author":{"gitId":"mfarhan-s"},"content":"     * @return The Task object created from the file string.","lastModifiedDate":"2024-04-03"},{"lineNumber":142,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If the file string has an invalid format or an unknown task type.","lastModifiedDate":"2024-04-03"},{"lineNumber":143,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"mfarhan-s"},"content":"    private static Task fileStringToTask(String fileString) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":145,"author":{"gitId":"mfarhan-s"},"content":"        assert fileString !\u003d null : \"File string must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"mfarhan-s"},"content":"        String[] fields \u003d fileString.split(\" \\\\| \");","lastModifiedDate":"2024-03-17"},{"lineNumber":148,"author":{"gitId":"mfarhan-s"},"content":"        if (fields.length \u003c 3) {","lastModifiedDate":"2024-03-17"},{"lineNumber":149,"author":{"gitId":"mfarhan-s"},"content":"            throw new DukeException(\"Invalid task format: \" + fileString);","lastModifiedDate":"2024-03-23"},{"lineNumber":150,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":151,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":152,"author":{"gitId":"mfarhan-s"},"content":"        char taskType \u003d fields[0].charAt(0);","lastModifiedDate":"2024-03-17"},{"lineNumber":153,"author":{"gitId":"mfarhan-s"},"content":"        boolean isDone \u003d fields[1].equals(\"1\");","lastModifiedDate":"2024-03-17"},{"lineNumber":154,"author":{"gitId":"mfarhan-s"},"content":"        String description \u003d fields[2];","lastModifiedDate":"2024-03-17"},{"lineNumber":155,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":156,"author":{"gitId":"mfarhan-s"},"content":"        switch (taskType) {","lastModifiedDate":"2024-03-17"},{"lineNumber":157,"author":{"gitId":"mfarhan-s"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2024-03-17"},{"lineNumber":158,"author":{"gitId":"mfarhan-s"},"content":"                return createToDoTask(description, isDone);","lastModifiedDate":"2024-04-03"},{"lineNumber":159,"author":{"gitId":"mfarhan-s"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2024-04-03"},{"lineNumber":160,"author":{"gitId":"mfarhan-s"},"content":"                return createDeadlineTask(description, fields, isDone);","lastModifiedDate":"2024-04-03"},{"lineNumber":161,"author":{"gitId":"mfarhan-s"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2024-04-03"},{"lineNumber":162,"author":{"gitId":"mfarhan-s"},"content":"                return createEventTask(description, fields, isDone);","lastModifiedDate":"2024-04-03"},{"lineNumber":163,"author":{"gitId":"mfarhan-s"},"content":"            default:","lastModifiedDate":"2024-04-03"},{"lineNumber":164,"author":{"gitId":"mfarhan-s"},"content":"                throw new DukeException(\"Unknown task type: \" + taskType);","lastModifiedDate":"2024-04-03"},{"lineNumber":165,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-04-03"},{"lineNumber":166,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":167,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":168,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":169,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a ToDo task based on the provided description and done status.","lastModifiedDate":"2024-04-03"},{"lineNumber":170,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"mfarhan-s"},"content":"     * @param description The description of the ToDo task.","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"mfarhan-s"},"content":"     * @param isDone      True if the task is marked as done, false otherwise.","lastModifiedDate":"2024-04-03"},{"lineNumber":173,"author":{"gitId":"mfarhan-s"},"content":"     * @return The created ToDo task.","lastModifiedDate":"2024-04-03"},{"lineNumber":174,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":175,"author":{"gitId":"mfarhan-s"},"content":"    private static ToDo createToDoTask(String description, boolean isDone) {","lastModifiedDate":"2024-04-03"},{"lineNumber":176,"author":{"gitId":"mfarhan-s"},"content":"        ToDo todo \u003d new ToDo(description);","lastModifiedDate":"2024-03-17"},{"lineNumber":177,"author":{"gitId":"mfarhan-s"},"content":"        if (isDone) {","lastModifiedDate":"2024-03-17"},{"lineNumber":178,"author":{"gitId":"mfarhan-s"},"content":"            todo.markAsDone();","lastModifiedDate":"2024-03-17"},{"lineNumber":179,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":180,"author":{"gitId":"mfarhan-s"},"content":"        return todo;","lastModifiedDate":"2024-03-17"},{"lineNumber":181,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":182,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":183,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":184,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a Deadline task based on the provided description, fields, and done status.","lastModifiedDate":"2024-04-03"},{"lineNumber":185,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":186,"author":{"gitId":"mfarhan-s"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2024-04-03"},{"lineNumber":187,"author":{"gitId":"mfarhan-s"},"content":"     * @param fields      The fields extracted from the file string.","lastModifiedDate":"2024-04-03"},{"lineNumber":188,"author":{"gitId":"mfarhan-s"},"content":"     * @param isDone      True if the task is marked as done, false otherwise.","lastModifiedDate":"2024-04-03"},{"lineNumber":189,"author":{"gitId":"mfarhan-s"},"content":"     * @return The created Deadline task.","lastModifiedDate":"2024-04-03"},{"lineNumber":190,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If the fields have an invalid format.","lastModifiedDate":"2024-04-03"},{"lineNumber":191,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":192,"author":{"gitId":"mfarhan-s"},"content":"    private static Deadline createDeadlineTask(String description, String[] fields, boolean isDone) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":193,"author":{"gitId":"mfarhan-s"},"content":"        assert description !\u003d null : \"Description must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":194,"author":{"gitId":"mfarhan-s"},"content":"        assert fields !\u003d null : \"Fields must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":195,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":196,"author":{"gitId":"mfarhan-s"},"content":"        if (fields.length \u003c 4) {","lastModifiedDate":"2024-03-17"},{"lineNumber":197,"author":{"gitId":"mfarhan-s"},"content":"            throw new DukeException(\"Invalid deadline format: \" + Arrays.toString(fields));","lastModifiedDate":"2024-04-03"},{"lineNumber":198,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":199,"author":{"gitId":"mfarhan-s"},"content":"        String byDateTimeString \u003d fields[3];","lastModifiedDate":"2024-03-23"},{"lineNumber":200,"author":{"gitId":"mfarhan-s"},"content":"        LocalDateTime byDateTime \u003d DateTimeParser.parseDateTime(byDateTimeString);","lastModifiedDate":"2024-03-23"},{"lineNumber":201,"author":{"gitId":"mfarhan-s"},"content":"        Deadline deadline \u003d new Deadline(description, byDateTime);","lastModifiedDate":"2024-03-23"},{"lineNumber":202,"author":{"gitId":"mfarhan-s"},"content":"        if (isDone) {","lastModifiedDate":"2024-03-17"},{"lineNumber":203,"author":{"gitId":"mfarhan-s"},"content":"            deadline.markAsDone();","lastModifiedDate":"2024-03-17"},{"lineNumber":204,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":205,"author":{"gitId":"mfarhan-s"},"content":"        return deadline;","lastModifiedDate":"2024-03-17"},{"lineNumber":206,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":207,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":208,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-03"},{"lineNumber":209,"author":{"gitId":"mfarhan-s"},"content":"     * Creates an Event task based on the provided description, fields, and done status.","lastModifiedDate":"2024-04-03"},{"lineNumber":210,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-03"},{"lineNumber":211,"author":{"gitId":"mfarhan-s"},"content":"     * @param description The description of the Event task.","lastModifiedDate":"2024-04-03"},{"lineNumber":212,"author":{"gitId":"mfarhan-s"},"content":"     * @param fields      The fields extracted from the file string.","lastModifiedDate":"2024-04-03"},{"lineNumber":213,"author":{"gitId":"mfarhan-s"},"content":"     * @param isDone      True if the task is marked as done, false otherwise.","lastModifiedDate":"2024-04-03"},{"lineNumber":214,"author":{"gitId":"mfarhan-s"},"content":"     * @return The created Event task.","lastModifiedDate":"2024-04-03"},{"lineNumber":215,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If the fields have an invalid format.","lastModifiedDate":"2024-04-03"},{"lineNumber":216,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-03"},{"lineNumber":217,"author":{"gitId":"mfarhan-s"},"content":"    private static Event createEventTask(String description, String[] fields, boolean isDone) throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":218,"author":{"gitId":"mfarhan-s"},"content":"        assert description !\u003d null : \"Description must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":219,"author":{"gitId":"mfarhan-s"},"content":"        assert fields !\u003d null : \"Fields must not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":220,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":221,"author":{"gitId":"mfarhan-s"},"content":"        if (fields.length \u003c 4) {","lastModifiedDate":"2024-03-17"},{"lineNumber":222,"author":{"gitId":"mfarhan-s"},"content":"            throw new DukeException(\"Invalid event format: \" + Arrays.toString(fields));","lastModifiedDate":"2024-04-03"},{"lineNumber":223,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":224,"author":{"gitId":"mfarhan-s"},"content":"        String[] fromTo \u003d fields[3].split(\" - \");","lastModifiedDate":"2024-03-17"},{"lineNumber":225,"author":{"gitId":"mfarhan-s"},"content":"        if (fromTo.length !\u003d 2) {","lastModifiedDate":"2024-03-17"},{"lineNumber":226,"author":{"gitId":"mfarhan-s"},"content":"            throw new DukeException(\"Invalid event format: \" + Arrays.toString(fields));","lastModifiedDate":"2024-04-03"},{"lineNumber":227,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":228,"author":{"gitId":"mfarhan-s"},"content":"        String fromDateTimeString \u003d fromTo[0];","lastModifiedDate":"2024-03-24"},{"lineNumber":229,"author":{"gitId":"mfarhan-s"},"content":"        String toDateTimeString \u003d fromTo[1];","lastModifiedDate":"2024-03-24"},{"lineNumber":230,"author":{"gitId":"mfarhan-s"},"content":"        LocalDateTime fromDateTime \u003d DateTimeParser.parseDateTime(fromDateTimeString);","lastModifiedDate":"2024-03-24"},{"lineNumber":231,"author":{"gitId":"mfarhan-s"},"content":"        LocalDateTime toDateTime \u003d DateTimeParser.parseDateTime(toDateTimeString);","lastModifiedDate":"2024-03-24"},{"lineNumber":232,"author":{"gitId":"mfarhan-s"},"content":"        Event event \u003d new Event(description, fromDateTime, toDateTime);","lastModifiedDate":"2024-03-24"},{"lineNumber":233,"author":{"gitId":"mfarhan-s"},"content":"        if (isDone) {","lastModifiedDate":"2024-03-17"},{"lineNumber":234,"author":{"gitId":"mfarhan-s"},"content":"            event.markAsDone();","lastModifiedDate":"2024-03-17"},{"lineNumber":235,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":236,"author":{"gitId":"mfarhan-s"},"content":"        return event;","lastModifiedDate":"2024-03-17"},{"lineNumber":237,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":238,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-03-17"}],"authorContributionMap":{"mfarhan-s":238}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.task;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import duke.command.DateTimeParser;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-03-24"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-23"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"// enter format as \"deadline \u003cdescription\u003e /by \u003cdd/mm/yyyy HHmm\u003e\"","lastModifiedDate":"2024-03-24"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"// deadline pay bills /by 21/4/2024 1200","lastModifiedDate":"2024-03-24"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":" * Represents a deadline task with a description and a due date and time.","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"    /** The due date and time of the deadline. */","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"    private LocalDateTime byDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"     * Constructs a deadline task with the given description and due date and time.","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"     * @param byDateTime  The due date and time of the deadline task.","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"    public Deadline(String description, LocalDateTime byDateTime) {","lastModifiedDate":"2024-03-23"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"        super(description);","lastModifiedDate":"2024-02-17"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"        this.byDateTime \u003d byDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"mfarhan-s"},"content":"     * Retrieves the due date and time of the deadline.","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"mfarhan-s"},"content":"     * @return The due date and time of the deadline.","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"mfarhan-s"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2024-03-23"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"        return byDateTime;","lastModifiedDate":"2024-03-23"},{"lineNumber":36,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":37,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"mfarhan-s"},"content":"     * Sets the due date and time of the deadline.","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"mfarhan-s"},"content":"     * @param newByDateTime The new due date and time of the deadline.","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"mfarhan-s"},"content":"    public void setBy(LocalDateTime newByDateTime) {","lastModifiedDate":"2024-04-01"},{"lineNumber":44,"author":{"gitId":"mfarhan-s"},"content":"        this.byDateTime \u003d newByDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":45,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":46,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":47,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"mfarhan-s"},"content":"     * Creates a deadline task from a user command string.","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"mfarhan-s"},"content":"     * @param command The user command string for creating the deadline task.","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"mfarhan-s"},"content":"     * @return The created deadline task, or null if an error occurs.","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"mfarhan-s"},"content":"    public static Deadline createDeadlineFromCommand(String command) {","lastModifiedDate":"2024-02-17"},{"lineNumber":54,"author":{"gitId":"mfarhan-s"},"content":"        String prefix \u003d \"deadline\";","lastModifiedDate":"2024-03-17"},{"lineNumber":55,"author":{"gitId":"mfarhan-s"},"content":"        String byKeyword \u003d \"/by\";","lastModifiedDate":"2024-03-17"},{"lineNumber":56,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":57,"author":{"gitId":"mfarhan-s"},"content":"        int prefixIndex \u003d command.toLowerCase().indexOf(prefix);","lastModifiedDate":"2024-03-17"},{"lineNumber":58,"author":{"gitId":"mfarhan-s"},"content":"        int byIndex \u003d command.indexOf(byKeyword);","lastModifiedDate":"2024-03-17"},{"lineNumber":59,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":60,"author":{"gitId":"mfarhan-s"},"content":"        try {","lastModifiedDate":"2024-03-24"},{"lineNumber":61,"author":{"gitId":"mfarhan-s"},"content":"            if (prefixIndex \u003d\u003d -1 || byIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-24"},{"lineNumber":62,"author":{"gitId":"mfarhan-s"},"content":"                throw DukeException.invalidDeadlineFormat();","lastModifiedDate":"2024-03-24"},{"lineNumber":63,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":64,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":65,"author":{"gitId":"mfarhan-s"},"content":"            String deadlineDescription \u003d command.substring(prefixIndex + prefix.length(), byIndex).trim();","lastModifiedDate":"2024-03-17"},{"lineNumber":66,"author":{"gitId":"mfarhan-s"},"content":"            String byDateTimeString \u003d command.substring(byIndex + byKeyword.length()).trim();","lastModifiedDate":"2024-03-23"},{"lineNumber":67,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":68,"author":{"gitId":"mfarhan-s"},"content":"            LocalDateTime byDateTime \u003d DateTimeParser.parseDateTime(byDateTimeString);","lastModifiedDate":"2024-03-23"},{"lineNumber":69,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-23"},{"lineNumber":70,"author":{"gitId":"mfarhan-s"},"content":"            if (byDateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2024-03-24"},{"lineNumber":71,"author":{"gitId":"mfarhan-s"},"content":"                throw new DukeException(\"Deadline has to be in the future\");","lastModifiedDate":"2024-03-24"},{"lineNumber":72,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-02-17"},{"lineNumber":73,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":74,"author":{"gitId":"mfarhan-s"},"content":"            if (deadlineDescription.isEmpty() || byDateTimeString.isEmpty()) {","lastModifiedDate":"2024-03-24"},{"lineNumber":75,"author":{"gitId":"mfarhan-s"},"content":"                throw DukeException.invalidDeadlineFormat();","lastModifiedDate":"2024-03-24"},{"lineNumber":76,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-02-17"},{"lineNumber":77,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":78,"author":{"gitId":"mfarhan-s"},"content":"            return new Deadline(deadlineDescription, byDateTime);","lastModifiedDate":"2024-03-24"},{"lineNumber":79,"author":{"gitId":"mfarhan-s"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":80,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(e);","lastModifiedDate":"2024-03-24"},{"lineNumber":81,"author":{"gitId":"mfarhan-s"},"content":"            return null;","lastModifiedDate":"2024-02-17"},{"lineNumber":82,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":83,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":84,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":85,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"mfarhan-s"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"mfarhan-s"},"content":"     * @return A string representation of the deadline task.","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"mfarhan-s"},"content":"    @Override","lastModifiedDate":"2024-02-17"},{"lineNumber":91,"author":{"gitId":"mfarhan-s"},"content":"    public String toString() {","lastModifiedDate":"2024-02-17"},{"lineNumber":92,"author":{"gitId":"mfarhan-s"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + byDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";","lastModifiedDate":"2024-03-23"},{"lineNumber":93,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":94,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"mfarhan-s":94}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.task;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import duke.command.DateTimeParser;","lastModifiedDate":"2024-03-24"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-03-24"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-03-24"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-24"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"// enter format as \"event \u003cdescription\u003e /from \u003cdd/mm/yyyy HHmm\u003e /to \u003cdd/mm/yyyy HHmm\u003e\"","lastModifiedDate":"2024-03-24"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":" * Represents an event task with a description and a duration.","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"    /** The start date and time of the event. */","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"    private LocalDateTime fromDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"    /** The end date and time of the event. */","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"    private LocalDateTime toDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"     * Constructs an event task with the given description, start date and time, and end date and time.","lastModifiedDate":"2024-04-02"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"     * @param description   The description of the event task.","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"     * @param fromDateTime  The start date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"     * @param toDateTime    The end date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"    public Event(String description, LocalDateTime fromDateTime, LocalDateTime toDateTime) {","lastModifiedDate":"2024-03-24"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"        super(description);","lastModifiedDate":"2024-02-17"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"        this.fromDateTime \u003d fromDateTime;","lastModifiedDate":"2024-03-24"},{"lineNumber":29,"author":{"gitId":"mfarhan-s"},"content":"        this.toDateTime \u003d toDateTime;","lastModifiedDate":"2024-03-24"},{"lineNumber":30,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":32,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"mfarhan-s"},"content":"     * Retrieves the start date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"     * @return The start date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"mfarhan-s"},"content":"    public LocalDateTime getFromDateTime() {","lastModifiedDate":"2024-03-24"},{"lineNumber":38,"author":{"gitId":"mfarhan-s"},"content":"        return fromDateTime;","lastModifiedDate":"2024-03-24"},{"lineNumber":39,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":40,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":41,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"mfarhan-s"},"content":"     * Retrieves the end date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":44,"author":{"gitId":"mfarhan-s"},"content":"     * @return The end date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":45,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":46,"author":{"gitId":"mfarhan-s"},"content":"    public LocalDateTime getToDateTime() {","lastModifiedDate":"2024-03-24"},{"lineNumber":47,"author":{"gitId":"mfarhan-s"},"content":"        return toDateTime;","lastModifiedDate":"2024-03-24"},{"lineNumber":48,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":49,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":50,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"mfarhan-s"},"content":"     * Sets the start date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"mfarhan-s"},"content":"     * @param newFromDateTime The new start date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"mfarhan-s"},"content":"    public void setFromDateTime(LocalDateTime newFromDateTime) {","lastModifiedDate":"2024-04-01"},{"lineNumber":56,"author":{"gitId":"mfarhan-s"},"content":"        this.fromDateTime \u003d newFromDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":57,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":58,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":59,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":60,"author":{"gitId":"mfarhan-s"},"content":"     * Sets the end date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":61,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":62,"author":{"gitId":"mfarhan-s"},"content":"     * @param newToDateTime The new end date and time of the event.","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"mfarhan-s"},"content":"    public void setToDateTime(LocalDateTime newToDateTime) {","lastModifiedDate":"2024-04-01"},{"lineNumber":65,"author":{"gitId":"mfarhan-s"},"content":"        this.toDateTime \u003d newToDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":66,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":67,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":68,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"mfarhan-s"},"content":"     * Creates an event task from a user command string.","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"mfarhan-s"},"content":"     * @param command The user command string for creating the event task.","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"mfarhan-s"},"content":"     * @return The created event task, or null if an error occurs.","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"mfarhan-s"},"content":"    public static Event createEventFromCommand(String command) {","lastModifiedDate":"2024-02-17"},{"lineNumber":75,"author":{"gitId":"mfarhan-s"},"content":"        String prefix \u003d \"event\";","lastModifiedDate":"2024-03-17"},{"lineNumber":76,"author":{"gitId":"mfarhan-s"},"content":"        String fromKeyword \u003d \"/from\";","lastModifiedDate":"2024-03-17"},{"lineNumber":77,"author":{"gitId":"mfarhan-s"},"content":"        String toKeyword \u003d \"/to\";","lastModifiedDate":"2024-03-17"},{"lineNumber":78,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":79,"author":{"gitId":"mfarhan-s"},"content":"        int prefixIndex \u003d command.toLowerCase().indexOf(prefix);","lastModifiedDate":"2024-03-17"},{"lineNumber":80,"author":{"gitId":"mfarhan-s"},"content":"        int fromIndex \u003d command.indexOf(fromKeyword);","lastModifiedDate":"2024-03-17"},{"lineNumber":81,"author":{"gitId":"mfarhan-s"},"content":"        int toIndex \u003d command.indexOf(toKeyword);","lastModifiedDate":"2024-03-17"},{"lineNumber":82,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":83,"author":{"gitId":"mfarhan-s"},"content":"        try {","lastModifiedDate":"2024-03-24"},{"lineNumber":84,"author":{"gitId":"mfarhan-s"},"content":"            if (prefixIndex \u003d\u003d -1 || fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1) {","lastModifiedDate":"2024-03-24"},{"lineNumber":85,"author":{"gitId":"mfarhan-s"},"content":"                throw DukeException.invalidEventFormat();","lastModifiedDate":"2024-03-24"},{"lineNumber":86,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":87,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":88,"author":{"gitId":"mfarhan-s"},"content":"            String eventDescription \u003d command.substring(prefixIndex + prefix.length(), fromIndex).trim();","lastModifiedDate":"2024-03-17"},{"lineNumber":89,"author":{"gitId":"mfarhan-s"},"content":"            String fromDateTimeString \u003d command.substring(fromIndex + fromKeyword.length(), toIndex).trim();","lastModifiedDate":"2024-03-24"},{"lineNumber":90,"author":{"gitId":"mfarhan-s"},"content":"            String toDateTimeString \u003d command.substring(toIndex + toKeyword.length()).trim();","lastModifiedDate":"2024-03-24"},{"lineNumber":91,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":92,"author":{"gitId":"mfarhan-s"},"content":"            if (eventDescription.isEmpty() || fromDateTimeString.isEmpty() || toDateTimeString.isEmpty()) {","lastModifiedDate":"2024-03-24"},{"lineNumber":93,"author":{"gitId":"mfarhan-s"},"content":"                throw DukeException.invalidEventFormat();","lastModifiedDate":"2024-03-24"},{"lineNumber":94,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-02-17"},{"lineNumber":95,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":96,"author":{"gitId":"mfarhan-s"},"content":"            LocalDateTime fromDateTime \u003d DateTimeParser.parseDateTime(fromDateTimeString);","lastModifiedDate":"2024-03-24"},{"lineNumber":97,"author":{"gitId":"mfarhan-s"},"content":"            LocalDateTime toDateTime \u003d DateTimeParser.parseDateTime(toDateTimeString);","lastModifiedDate":"2024-03-24"},{"lineNumber":98,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":99,"author":{"gitId":"mfarhan-s"},"content":"            if (fromDateTime.isAfter(toDateTime)) {","lastModifiedDate":"2024-03-24"},{"lineNumber":100,"author":{"gitId":"mfarhan-s"},"content":"                throw new DukeException(\"Start time cannot be after end time\");","lastModifiedDate":"2024-03-24"},{"lineNumber":101,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-24"},{"lineNumber":102,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":103,"author":{"gitId":"mfarhan-s"},"content":"            if (fromDateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2024-03-24"},{"lineNumber":104,"author":{"gitId":"mfarhan-s"},"content":"                throw new DukeException(\"Start time must be in the future\");","lastModifiedDate":"2024-03-24"},{"lineNumber":105,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-02-17"},{"lineNumber":106,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-24"},{"lineNumber":107,"author":{"gitId":"mfarhan-s"},"content":"            return new Event(eventDescription, fromDateTime, toDateTime);","lastModifiedDate":"2024-03-24"},{"lineNumber":108,"author":{"gitId":"mfarhan-s"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-03-24"},{"lineNumber":109,"author":{"gitId":"mfarhan-s"},"content":"            DukeException.handleGracefulError(e);","lastModifiedDate":"2024-03-24"},{"lineNumber":110,"author":{"gitId":"mfarhan-s"},"content":"            return null;","lastModifiedDate":"2024-02-17"},{"lineNumber":111,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":112,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-24"},{"lineNumber":113,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":114,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":115,"author":{"gitId":"mfarhan-s"},"content":"     * Returns a string representation of the event task.","lastModifiedDate":"2024-04-02"},{"lineNumber":116,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":117,"author":{"gitId":"mfarhan-s"},"content":"     * @return A string representation of the event task.","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"mfarhan-s"},"content":"    @Override","lastModifiedDate":"2024-03-17"},{"lineNumber":120,"author":{"gitId":"mfarhan-s"},"content":"    public String toString() {","lastModifiedDate":"2024-03-17"},{"lineNumber":121,"author":{"gitId":"mfarhan-s"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + fromDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) +","lastModifiedDate":"2024-03-24"},{"lineNumber":122,"author":{"gitId":"mfarhan-s"},"content":"                \" to: \" + toDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";","lastModifiedDate":"2024-03-24"},{"lineNumber":123,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-17"},{"lineNumber":124,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"mfarhan-s":124}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.task;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":" * Represents a task with a description and completion status.","lastModifiedDate":"2024-04-02"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"public class Task {","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"    /** The description of the task. */","lastModifiedDate":"2024-04-02"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"    private String description;","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"    /** The completion status of the task. */","lastModifiedDate":"2024-04-02"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"    private boolean isDone;","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"     * Constructs a task with the given description and sets its completion status to false.","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-04-02"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"    public Task(String description) {","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"     * @return The description of the task.","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"        return description;","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":32,"author":{"gitId":"mfarhan-s"},"content":"     * Checks if the task is done.","lastModifiedDate":"2024-04-02"},{"lineNumber":33,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":34,"author":{"gitId":"mfarhan-s"},"content":"     * @return True if the task is done, false otherwise.","lastModifiedDate":"2024-04-02"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"mfarhan-s"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"mfarhan-s"},"content":"        return isDone;","lastModifiedDate":"2024-02-13"},{"lineNumber":38,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"mfarhan-s"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":43,"author":{"gitId":"mfarhan-s"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"mfarhan-s"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-02-13"},{"lineNumber":45,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":46,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"mfarhan-s"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"mfarhan-s"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2024-02-13"},{"lineNumber":51,"author":{"gitId":"mfarhan-s"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-13"},{"lineNumber":52,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":53,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":54,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":55,"author":{"gitId":"mfarhan-s"},"content":"     * Retrieves the status icon of the task.","lastModifiedDate":"2024-04-02"},{"lineNumber":56,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":57,"author":{"gitId":"mfarhan-s"},"content":"     * @return The status icon of the task (X if done, empty string if not done).","lastModifiedDate":"2024-04-02"},{"lineNumber":58,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":59,"author":{"gitId":"mfarhan-s"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-02-13"},{"lineNumber":60,"author":{"gitId":"mfarhan-s"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-02-13"},{"lineNumber":61,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":62,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":63,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"mfarhan-s"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"mfarhan-s"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"mfarhan-s"},"content":"    public String toString() {","lastModifiedDate":"2024-02-13"},{"lineNumber":69,"author":{"gitId":"mfarhan-s"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2024-02-13"},{"lineNumber":70,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":71,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":73,"author":{"gitId":"mfarhan-s"},"content":"     * Echoes the user command for the task.","lastModifiedDate":"2024-04-02"},{"lineNumber":74,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":75,"author":{"gitId":"mfarhan-s"},"content":"     * @param task The task whose user command is echoed.","lastModifiedDate":"2024-04-02"},{"lineNumber":76,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":77,"author":{"gitId":"mfarhan-s"},"content":"    public static void echoUserCommand(Task task) {","lastModifiedDate":"2024-02-17"},{"lineNumber":78,"author":{"gitId":"mfarhan-s"},"content":"        System.out.println(\"    A foolish command, mortal! You dare to utter:\\n        \" + TaskList.taskList.size() + \". \" + task.toString());","lastModifiedDate":"2024-04-03"},{"lineNumber":79,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":80,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"mfarhan-s":80}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.task;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-03-23"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"import duke.ui.Ui;","lastModifiedDate":"2024-03-22"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-03-22"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"import java.time.Duration;","lastModifiedDate":"2024-04-01"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-04-01"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":" * Represents a list of tasks.","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":" * Manages tasks and provides methods to add, delete, mark as done, etc.","lastModifiedDate":"2024-04-02"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"public class TaskList {","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"     * The list of tasks.","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"    public static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"     * Reads tasks from a file and loads them into the task list.","lastModifiedDate":"2024-04-02"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while reading tasks from the file.","lastModifiedDate":"2024-04-02"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"    public void readTasksFromFile() throws DukeException {","lastModifiedDate":"2024-04-17"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d Storage.loadTasksFromFile();","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"        if (!loadedTasks.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"mfarhan-s"},"content":"            taskList.addAll(loadedTasks);","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    \" + taskList.size() + \" task(s) loaded from previous session!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"            Ui.printHorizontalLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":36,"author":{"gitId":"mfarhan-s"},"content":"     * Adds a task to the task list and saves tasks to file.","lastModifiedDate":"2024-04-02"},{"lineNumber":37,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"mfarhan-s"},"content":"     * @param task The task to be added.","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while saving tasks to file.","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"mfarhan-s"},"content":"    public static void addTask(Task task) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":42,"author":{"gitId":"mfarhan-s"},"content":"        assert task !\u003d null : \"Task to be added should not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":43,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":44,"author":{"gitId":"mfarhan-s"},"content":"        taskList.add(task);","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"mfarhan-s"},"content":"        Task.echoUserCommand(task);","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"mfarhan-s"},"content":"        System.out.println(\"    Now you have \" + taskList.size() + \" task(s) in your list.\");","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"mfarhan-s"},"content":"        Storage.saveTasksToFile(taskList);","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"mfarhan-s"},"content":"     * Displays the list of tasks.","lastModifiedDate":"2024-04-02"},{"lineNumber":52,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":53,"author":{"gitId":"mfarhan-s"},"content":"    public static void displayList() {","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"mfarhan-s"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    Your feeble Task List is Empty!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d Scroll of Puny Tasks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"mfarhan-s"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(\"        \" + (i + 1) + \". \" + taskList.get(i));","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"mfarhan-s"},"content":"        Ui.printHorizontalLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"mfarhan-s"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2024-04-02"},{"lineNumber":67,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":68,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskNumber The number of the task to be deleted.","lastModifiedDate":"2024-04-02"},{"lineNumber":69,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskList   The list of tasks.","lastModifiedDate":"2024-04-02"},{"lineNumber":70,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while saving tasks to file.","lastModifiedDate":"2024-04-02"},{"lineNumber":71,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":72,"author":{"gitId":"mfarhan-s"},"content":"    public static void deleteTask(int taskNumber, ArrayList\u003cTask\u003e taskList) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":73,"author":{"gitId":"mfarhan-s"},"content":"        assert taskList !\u003d null : \"Task list should not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":74,"author":{"gitId":"mfarhan-s"},"content":"        assert isValidTaskNumber(taskNumber, taskList) : \"Invalid task number\";","lastModifiedDate":"2024-04-03"},{"lineNumber":75,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":76,"author":{"gitId":"mfarhan-s"},"content":"        if (isValidTaskNumber(taskNumber, taskList)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":77,"author":{"gitId":"mfarhan-s"},"content":"            Task deletedTask \u003d taskList.remove(taskNumber - 1);","lastModifiedDate":"2024-03-20"},{"lineNumber":78,"author":{"gitId":"mfarhan-s"},"content":"            Storage.saveTasksToFile(TaskList.taskList);","lastModifiedDate":"2024-03-20"},{"lineNumber":79,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    Witness the eradication of this feeble task:\\n      \" + taskNumber + \". \" + deletedTask.toString());","lastModifiedDate":"2024-04-03"},{"lineNumber":80,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    Now you have \" + taskList.size() + \" task(s) in the list. Tremble!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":81,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":82,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    Fool! That task number is beyond the realm of your pitiful list!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":83,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":84,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":85,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":86,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":87,"author":{"gitId":"mfarhan-s"},"content":"     * Checks if the task number is valid.","lastModifiedDate":"2024-04-02"},{"lineNumber":88,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":89,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskNumber The task number to be checked.","lastModifiedDate":"2024-04-02"},{"lineNumber":90,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskList   The list of tasks.","lastModifiedDate":"2024-04-02"},{"lineNumber":91,"author":{"gitId":"mfarhan-s"},"content":"     * @return True if the task number is valid, false otherwise.","lastModifiedDate":"2024-04-02"},{"lineNumber":92,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":93,"author":{"gitId":"mfarhan-s"},"content":"    public static boolean isValidTaskNumber(int taskNumber, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-03-20"},{"lineNumber":94,"author":{"gitId":"mfarhan-s"},"content":"        return taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d taskList.size();","lastModifiedDate":"2024-03-20"},{"lineNumber":95,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":96,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":97,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":98,"author":{"gitId":"mfarhan-s"},"content":"     * Marks a task as done.","lastModifiedDate":"2024-04-02"},{"lineNumber":99,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":100,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskNumber The number of the task to be marked as done.","lastModifiedDate":"2024-04-02"},{"lineNumber":101,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while saving tasks to file.","lastModifiedDate":"2024-04-02"},{"lineNumber":102,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":103,"author":{"gitId":"mfarhan-s"},"content":"    public static void markTaskAsDone(int taskNumber) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":104,"author":{"gitId":"mfarhan-s"},"content":"        if (TaskList.isValidTaskNumber(taskNumber, TaskList.taskList)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":105,"author":{"gitId":"mfarhan-s"},"content":"            Task task \u003d TaskList.taskList.get(taskNumber - 1);","lastModifiedDate":"2024-03-20"},{"lineNumber":106,"author":{"gitId":"mfarhan-s"},"content":"            if (!task.isDone()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":107,"author":{"gitId":"mfarhan-s"},"content":"                task.markAsDone();","lastModifiedDate":"2024-03-20"},{"lineNumber":108,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(\"    Hmph! I\u0027ve smitten this task from the list:\\n      \" + taskNumber + \". \" + task);","lastModifiedDate":"2024-04-03"},{"lineNumber":109,"author":{"gitId":"mfarhan-s"},"content":"                Storage.saveTasksToFile(TaskList.taskList);","lastModifiedDate":"2024-03-20"},{"lineNumber":110,"author":{"gitId":"mfarhan-s"},"content":"            } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":111,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(\"    Fool! This task has already been marked as done!\\n      \" + taskNumber + \". \" + task);","lastModifiedDate":"2024-04-03"},{"lineNumber":112,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":113,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":114,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    Fool! That task number is beyond the realm of your pitiful list!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":115,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":116,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":117,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-02"},{"lineNumber":118,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":119,"author":{"gitId":"mfarhan-s"},"content":"     * Unmarks a task as done.","lastModifiedDate":"2024-04-02"},{"lineNumber":120,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":121,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskNumber The number of the task to be unmarked as done.","lastModifiedDate":"2024-04-02"},{"lineNumber":122,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while saving tasks to file.","lastModifiedDate":"2024-04-02"},{"lineNumber":123,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":124,"author":{"gitId":"mfarhan-s"},"content":"    public static void unmarkTaskAsDone(int taskNumber) throws DukeException {","lastModifiedDate":"2024-03-23"},{"lineNumber":125,"author":{"gitId":"mfarhan-s"},"content":"        if (TaskList.isValidTaskNumber(taskNumber, TaskList.taskList)) {","lastModifiedDate":"2024-03-20"},{"lineNumber":126,"author":{"gitId":"mfarhan-s"},"content":"            Task task \u003d TaskList.taskList.get(taskNumber - 1);","lastModifiedDate":"2024-03-20"},{"lineNumber":127,"author":{"gitId":"mfarhan-s"},"content":"            if (task.isDone()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":128,"author":{"gitId":"mfarhan-s"},"content":"                task.unmarkAsDone();","lastModifiedDate":"2024-03-20"},{"lineNumber":129,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(\"    Bah! I\u0027ve restored this task to its pathetic existence:\\n      \" + taskNumber + \". \" + task);","lastModifiedDate":"2024-04-03"},{"lineNumber":130,"author":{"gitId":"mfarhan-s"},"content":"                Storage.saveTasksToFile(TaskList.taskList);","lastModifiedDate":"2024-03-20"},{"lineNumber":131,"author":{"gitId":"mfarhan-s"},"content":"            } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":132,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(\"    Fool! This task is already in its wretched, incomplete state!\\n      \" + taskNumber + \". \" + task);","lastModifiedDate":"2024-04-03"},{"lineNumber":133,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":134,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":135,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    You dare invoke the invalid task number? Pathetic!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":136,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":137,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":138,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":139,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":140,"author":{"gitId":"mfarhan-s"},"content":"     * Finds tasks containing a specific keyword and displays them.","lastModifiedDate":"2024-04-02"},{"lineNumber":141,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":142,"author":{"gitId":"mfarhan-s"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2024-04-02"},{"lineNumber":143,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":144,"author":{"gitId":"mfarhan-s"},"content":"    public static void findTasksByKeyword(String keyword) {","lastModifiedDate":"2024-04-01"},{"lineNumber":145,"author":{"gitId":"mfarhan-s"},"content":"        boolean isFound \u003d false;","lastModifiedDate":"2024-04-03"},{"lineNumber":146,"author":{"gitId":"mfarhan-s"},"content":"        for (int i \u003d 0; i \u003c TaskList.taskList.size(); i++) {","lastModifiedDate":"2024-04-03"},{"lineNumber":147,"author":{"gitId":"mfarhan-s"},"content":"            Task task \u003d TaskList.taskList.get(i);","lastModifiedDate":"2024-04-03"},{"lineNumber":148,"author":{"gitId":"mfarhan-s"},"content":"            if (task.getDescription().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2024-04-01"},{"lineNumber":149,"author":{"gitId":"mfarhan-s"},"content":"                if (!isFound) {","lastModifiedDate":"2024-04-03"},{"lineNumber":150,"author":{"gitId":"mfarhan-s"},"content":"                    System.out.println(\"    Tasks containing keyword \u0027\" + keyword + \"\u0027:\");","lastModifiedDate":"2024-04-01"},{"lineNumber":151,"author":{"gitId":"mfarhan-s"},"content":"                    isFound \u003d true;","lastModifiedDate":"2024-04-03"},{"lineNumber":152,"author":{"gitId":"mfarhan-s"},"content":"                }","lastModifiedDate":"2024-04-01"},{"lineNumber":153,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(\"        \" + (i + 1) + \". \" + task);","lastModifiedDate":"2024-04-03"},{"lineNumber":154,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":155,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":156,"author":{"gitId":"mfarhan-s"},"content":"        if (!isFound) {","lastModifiedDate":"2024-04-03"},{"lineNumber":157,"author":{"gitId":"mfarhan-s"},"content":"            System.out.println(\"    No tasks containing keyword \u0027\" + keyword + \"\u0027 found.\");","lastModifiedDate":"2024-04-01"},{"lineNumber":158,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":159,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":160,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":161,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":162,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":163,"author":{"gitId":"mfarhan-s"},"content":"     * Postpones the due date of a task.","lastModifiedDate":"2024-04-02"},{"lineNumber":164,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":165,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskNumber       The number of the task to be postponed.","lastModifiedDate":"2024-04-02"},{"lineNumber":166,"author":{"gitId":"mfarhan-s"},"content":"     * @param newDueDateTime   The new due date and time.","lastModifiedDate":"2024-04-02"},{"lineNumber":167,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException   If there is an error while saving tasks to file.","lastModifiedDate":"2024-04-02"},{"lineNumber":168,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":169,"author":{"gitId":"mfarhan-s"},"content":"    public static void postponeTask(int taskNumber, LocalDateTime newDueDateTime) throws DukeException {","lastModifiedDate":"2024-04-01"},{"lineNumber":170,"author":{"gitId":"mfarhan-s"},"content":"        assert taskList !\u003d null : \"Task list should not be null\";","lastModifiedDate":"2024-04-03"},{"lineNumber":171,"author":{"gitId":"mfarhan-s"},"content":"        assert isValidTaskNumber(taskNumber, taskList) : \"Invalid task number\";","lastModifiedDate":"2024-04-03"},{"lineNumber":172,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":173,"author":{"gitId":"mfarhan-s"},"content":"        if (isValidTaskNumber(taskNumber, taskList)) {","lastModifiedDate":"2024-04-01"},{"lineNumber":174,"author":{"gitId":"mfarhan-s"},"content":"            Task task \u003d taskList.get(taskNumber - 1);","lastModifiedDate":"2024-04-01"},{"lineNumber":175,"author":{"gitId":"mfarhan-s"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2024-04-01"},{"lineNumber":176,"author":{"gitId":"mfarhan-s"},"content":"                Deadline deadlineTask \u003d (Deadline) task;","lastModifiedDate":"2024-04-01"},{"lineNumber":177,"author":{"gitId":"mfarhan-s"},"content":"                deadlineTask.setBy(newDueDateTime);","lastModifiedDate":"2024-04-01"},{"lineNumber":178,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(\"    Task has been postponed successfully:\\n\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":179,"author":{"gitId":"mfarhan-s"},"content":"                                   \"   \" + taskNumber + \". \" + deadlineTask);","lastModifiedDate":"2024-04-01"},{"lineNumber":180,"author":{"gitId":"mfarhan-s"},"content":"                Storage.saveTasksToFile(taskList);","lastModifiedDate":"2024-04-01"},{"lineNumber":181,"author":{"gitId":"mfarhan-s"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2024-04-01"},{"lineNumber":182,"author":{"gitId":"mfarhan-s"},"content":"                Event eventTask \u003d (Event) task;","lastModifiedDate":"2024-04-01"},{"lineNumber":183,"author":{"gitId":"mfarhan-s"},"content":"                LocalDateTime oldStartDateTime \u003d eventTask.getFromDateTime();","lastModifiedDate":"2024-04-01"},{"lineNumber":184,"author":{"gitId":"mfarhan-s"},"content":"                LocalDateTime oldEndDateTime \u003d eventTask.getToDateTime();","lastModifiedDate":"2024-04-01"},{"lineNumber":185,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":186,"author":{"gitId":"mfarhan-s"},"content":"                // Calculate the duration between old start time and end time","lastModifiedDate":"2024-04-01"},{"lineNumber":187,"author":{"gitId":"mfarhan-s"},"content":"                Duration duration \u003d Duration.between(oldStartDateTime, oldEndDateTime);","lastModifiedDate":"2024-04-01"},{"lineNumber":188,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":189,"author":{"gitId":"mfarhan-s"},"content":"                // Set new end time by adding the duration to the new start time","lastModifiedDate":"2024-04-01"},{"lineNumber":190,"author":{"gitId":"mfarhan-s"},"content":"                LocalDateTime newEndDateTime \u003d newDueDateTime.plus(duration);","lastModifiedDate":"2024-04-01"},{"lineNumber":191,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":192,"author":{"gitId":"mfarhan-s"},"content":"                // Update event task with new start and end times","lastModifiedDate":"2024-04-01"},{"lineNumber":193,"author":{"gitId":"mfarhan-s"},"content":"                eventTask.setFromDateTime(newDueDateTime);","lastModifiedDate":"2024-04-01"},{"lineNumber":194,"author":{"gitId":"mfarhan-s"},"content":"                eventTask.setToDateTime(newEndDateTime);","lastModifiedDate":"2024-04-01"},{"lineNumber":195,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":196,"author":{"gitId":"mfarhan-s"},"content":"                System.out.println(\"    Event task has been postponed successfully:\\n\" +","lastModifiedDate":"2024-04-01"},{"lineNumber":197,"author":{"gitId":"mfarhan-s"},"content":"                                   \"   \" + taskNumber + \". \" + eventTask);","lastModifiedDate":"2024-04-01"},{"lineNumber":198,"author":{"gitId":"mfarhan-s"},"content":"                Storage.saveTasksToFile(taskList);","lastModifiedDate":"2024-04-01"},{"lineNumber":199,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-04-01"},{"lineNumber":200,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-04-01"},{"lineNumber":201,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-01"},{"lineNumber":202,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"mfarhan-s":202}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.task;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"        super(description);","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"    public static ToDo createToDoFromCommand(String command) {","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"        String prefix \u003d \"todo\";","lastModifiedDate":"2024-03-17"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"        int prefixIndex \u003d command.toLowerCase().indexOf(prefix);","lastModifiedDate":"2024-03-17"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"        if (prefixIndex !\u003d -1) {","lastModifiedDate":"2024-03-17"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"            String todoDescription \u003d command.substring(prefixIndex + prefix.length()).trim();","lastModifiedDate":"2024-03-17"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"            if (!todoDescription.isEmpty()) {","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"                return new ToDo(todoDescription);","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-17"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"        return null;","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"    @Override","lastModifiedDate":"2024-02-17"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"    public String toString() {","lastModifiedDate":"2024-02-17"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-17"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-17"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"mfarhan-s":25}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.ui;","lastModifiedDate":"2024-03-22"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-22"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-03-23"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"import duke.task.Task;","lastModifiedDate":"2024-03-22"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-03-22"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-03-22"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-01"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"/**","lastModifiedDate":"2024-04-02"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":" * Handles user interface interactions, including displaying messages and task lists.","lastModifiedDate":"2024-04-02"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":" */","lastModifiedDate":"2024-04-02"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"public class Ui {","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"    /** A horizontal line separator used for formatting messages. */","lastModifiedDate":"2024-04-02"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"    private static final String HORIZONTAL_LINE \u003d \"    -------------------------------------------------\";","lastModifiedDate":"2024-04-01"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"     * Greets the user with a welcoming message.","lastModifiedDate":"2024-04-02"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"    public void greetUser() {","lastModifiedDate":"2024-04-17"},{"lineNumber":21,"author":{"gitId":"mfarhan-s"},"content":"        System.out.println(\"    Greetings, mortal! I am Balrog, the fiery demon.\");","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"mfarhan-s"},"content":"        System.out.println(\"    What foolish commands do you wish to utter?\");","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"mfarhan-s"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":27,"author":{"gitId":"mfarhan-s"},"content":"     * Bids farewell to the user with a goodbye message and saves tasks to file.","lastModifiedDate":"2024-04-02"},{"lineNumber":28,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":29,"author":{"gitId":"mfarhan-s"},"content":"     * @throws DukeException If there is an error while saving tasks to file.","lastModifiedDate":"2024-04-02"},{"lineNumber":30,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":31,"author":{"gitId":"mfarhan-s"},"content":"    public void sayGoodbye() throws DukeException {","lastModifiedDate":"2024-04-17"},{"lineNumber":32,"author":{"gitId":"mfarhan-s"},"content":"        Storage.saveTasksToFile(TaskList.taskList);","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"mfarhan-s"},"content":"        displayMessage(\"    Flee, mortal! Until our paths cross again!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"mfarhan-s"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":38,"author":{"gitId":"mfarhan-s"},"content":"     * Displays a message to the user.","lastModifiedDate":"2024-04-02"},{"lineNumber":39,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":40,"author":{"gitId":"mfarhan-s"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2024-04-02"},{"lineNumber":41,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":42,"author":{"gitId":"mfarhan-s"},"content":"    public static void displayMessage(String message) {","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"mfarhan-s"},"content":"        System.out.println(message);","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":47,"author":{"gitId":"mfarhan-s"},"content":"     * Displays the task list to the user.","lastModifiedDate":"2024-04-02"},{"lineNumber":48,"author":{"gitId":"mfarhan-s"},"content":"     *","lastModifiedDate":"2024-04-02"},{"lineNumber":49,"author":{"gitId":"mfarhan-s"},"content":"     * @param taskList The list of tasks to be displayed.","lastModifiedDate":"2024-04-02"},{"lineNumber":50,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":51,"author":{"gitId":"mfarhan-s"},"content":"    public static void displayTaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"mfarhan-s"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"mfarhan-s"},"content":"            displayMessage(\"    Your feeble Task List is Empty!\");","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"mfarhan-s"},"content":"        } else {","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"mfarhan-s"},"content":"            displayMessage(\"    \u003d\u003d\u003d\u003d\u003d\u003d\u003d Scroll of Puny Tasks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"mfarhan-s"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"mfarhan-s"},"content":"                displayMessage(\"        \" + (i + 1) + \". \" + taskList.get(i));","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"mfarhan-s"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"mfarhan-s"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"mfarhan-s"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"mfarhan-s"},"content":"    /**","lastModifiedDate":"2024-04-02"},{"lineNumber":64,"author":{"gitId":"mfarhan-s"},"content":"     * Prints a horizontal line separator to the console.","lastModifiedDate":"2024-04-02"},{"lineNumber":65,"author":{"gitId":"mfarhan-s"},"content":"     */","lastModifiedDate":"2024-04-02"},{"lineNumber":66,"author":{"gitId":"mfarhan-s"},"content":"    public static void printHorizontalLine() {","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"mfarhan-s"},"content":"        displayMessage(HORIZONTAL_LINE);","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"mfarhan-s":69}},{"path":"src/test/java/duke/command/DateTimeParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.command;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"public class DateTimeParserTest {","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"    @Test","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":"    public void testParseDateTime_validDateTime_success() throws DukeException {","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"        String dateTimeString \u003d \"21/04/2024 1200\";","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.of(2024, 4, 21, 12, 0);","lastModifiedDate":"2024-04-03"},{"lineNumber":15,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":16,"author":{"gitId":"mfarhan-s"},"content":"        LocalDateTime actualDateTime \u003d DateTimeParser.parseDateTime(dateTimeString);","lastModifiedDate":"2024-04-03"},{"lineNumber":17,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":18,"author":{"gitId":"mfarhan-s"},"content":"        assertEquals(expectedDateTime, actualDateTime);","lastModifiedDate":"2024-04-03"},{"lineNumber":19,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":20,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"mfarhan-s":20}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mfarhan-s"},"content":"package duke.task;","lastModifiedDate":"2024-04-03"},{"lineNumber":2,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":3,"author":{"gitId":"mfarhan-s"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-04-03"},{"lineNumber":4,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":5,"author":{"gitId":"mfarhan-s"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-04-03"},{"lineNumber":6,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":7,"author":{"gitId":"mfarhan-s"},"content":"public class TodoTest {","lastModifiedDate":"2024-04-03"},{"lineNumber":8,"author":{"gitId":"mfarhan-s"},"content":"    @Test","lastModifiedDate":"2024-04-03"},{"lineNumber":9,"author":{"gitId":"mfarhan-s"},"content":"    public void testCreateTodo(){","lastModifiedDate":"2024-04-03"},{"lineNumber":10,"author":{"gitId":"mfarhan-s"},"content":"        String line \u003d \"todo read book\";","lastModifiedDate":"2024-04-03"},{"lineNumber":11,"author":{"gitId":"mfarhan-s"},"content":"","lastModifiedDate":"2024-04-03"},{"lineNumber":12,"author":{"gitId":"mfarhan-s"},"content":"        assertEquals(\"[T][ ] read book\", duke.task.ToDo.createToDoFromCommand(line).toString());","lastModifiedDate":"2024-04-03"},{"lineNumber":13,"author":{"gitId":"mfarhan-s"},"content":"    }","lastModifiedDate":"2024-04-03"},{"lineNumber":14,"author":{"gitId":"mfarhan-s"},"content":"}","lastModifiedDate":"2024-04-03"}],"authorContributionMap":{"mfarhan-s":14}}]
